;命名時重要要表達的意思，最主要的意思要放前面，輔助說明的放後面
;function的args排序也是一樣

我覺得變數命名需要一眼就知道他的資料型態
occurs_hash
而像idx of arr, 就應該直接綁定該arr變數名
idx_vec in
for (int idx_vec = 0; idx_vec < vec.size(); idx_vec++)

直接綁定該hash變數名
iter_occurs in
for (std::unordered_map<int,int>::iterator iter_occurs = occurs_hash.begin();
     iter_occurs != occurs_hash.end();
     ++iter_occurs )
-----------------------------Good Words------------------------------
選擇與選項
(opt options)

Cell

Current forward

Last next

Pick

Piece

first, lead

表達空的概念:
  (是否為空?, val)
empty:(#t)
non-empty:(#f #t)
其實就是用不同bits數來表達, 解決空的問題. (缺點: 這樣表達效率會變慢)
一個bit表達是否為空, 另一個bit表達實際內容, 這樣空與不空肯定不會與內容混淆重覆.

search_var var val

([car_search env] search_var)
([car_empty_env? env])

Stuff

Build_function

Element makes elegance


------------------------------------------
可讀性>模組化

可讀性衡量標準
好:易懂, 程式碼符合我們心理的期望行為

無關:

壞:代碼不直觀(要繞幾個彎, 即使這是為了更加模組化而寫成這樣)會造成理解開銷, 程式塗改困難


(let ([x 4] [y 5])
  (case (+ x y)
    [(1 3 5 7 9) 'odd]
    [(0 2 4 6 8) 'even]
    [else 'out-of-range]))

(require racket/trace)
(define (f x) (if (zero? x) 0 (add1 (f (sub1 x)))))
(trace f)
(f 10)

(define my-list
  (lambda x 	;引數是list, 加括號後變成一一對應的引數.
    x))
(my-list 'a 'b 'c)
> '(a b c)

;感覺就是迴圈
(let cool {[a 1]}
  (display a)
  {cond
    ((eq? a 10) a)
    (else (cool (+ a 1)))})
> 1234567891010

;Should follow this format
(define mul
  (lambda (x y)
    {cond
      [(number? x)
       {cond
         [(number? y) (* x y)]
         [(matrix? y) (mat-sca-mul y x)]
         [else (type-error y)]}]
      [(matrix? x)
       {cond
         [(number? y) (mat-sca-mul x y)]
         [(matrix? y) (mat-mat-mul x y)]
         [else (type-error y)]}]
      [else (type-error x)]}))

;程式碼應該先橫再直, 有更高的可讀性.
(let* {[a 10] [b a] [c b]}
  100)

(let* {[a 10]
       [b a]
       [c b]}
  100)

Let uasage:
;引數proc應放在最下面的return function,我認為比放在make-engine好,
;有更高的內聚,更atomic.
(define make-engine
  (lambda (proc)
    [define do-complete #f] [define do-expire #f]
    (let {[timer-handler
            (lambda ()
              (start-timer (call/cc do-expire) timer-handler))]
          [new-engine
            (lambda (resume)
              (lambda (ticks complete expire)
                ((call/cc
                   (lambda (escape)
                     (set! do-complete
                       (lambda (ticks value)
                         (escape (lambda () (complete ticks value)))))
                     (set! do-expire
                       (lambda (resume)
                         (escape (lambda ()
                                   (expire (new-engine resume))))))
                     (resume ticks))))))]}
      (new-engine
        (lambda (ticks)
          (start-timer ticks timer-handler)
          (let ([value (proc)])
            (let ([ticks (stop-timer)])
              (do-complete ticks value))))))))
;a0:a3|a1 a2
;禁止跨層抽象

;follow below usage of let
;let有兩層抽象:
;一層是{...}裡面,這裡放trivial definitions;
;另一層是(begin ...)裡面放main definitions,以[define ...]定義;
;下一層抽象使用下一個(let ...)表達.

;trivial definitions的分辨方法:
;如我們會說a1 a2 compose a3,
;但不會說{[do-complete #f] [do-expire #f]} compose a2.
(define make-engine ;a0
  (let {}
    [define timer-handler ;a1
      (let {[do-expire #f]}
        (lambda ()
          (start-timer (call/cc do-expire) timer-handler)))]
    [define new-engine ;a2
      (let {[do-complete #f] [do-expire #f]}
        (lambda (resume)
          (lambda (ticks complete expire)
            ((call/cc
               (lambda (escape)
                 (set! do-complete
                   (lambda (ticks value)
                     (escape (lambda () (complete ticks value)))))
                 (set! do-expire
                   (lambda (resume)
                     (escape (lambda ()
                               (expire (new-engine resume))))))
                 (resume ticks)))))))]
    [let {[do-complete #f] [do-expire #f]}
      (lambda (proc) ;a3
        (new-engine
          (lambda (ticks)
            (start-timer ticks timer-handler)
            (let ([value (proc)])
              (let ([ticks (stop-timer)])
                (do-complete ticks value))))))]))


(define var0
  (lambda (var1 ... varn)
    e1 e2 ...))
=
(define (var0 var1 ... varn)
  e1 e2 ...)

(define var0
  (lambda varr
    e1 e2 ...))
=
(define (var0 . varr)
  e1 e2 ...)

(define var0
  (lambda (var1 ... varn . varr)
    e1 e2 ...))
=
(define (var0 var1 ... varn . varr)
  e1 e2 ...)


(define make-stack
  (lambda ()
    (let ([ls '()])
      (lambda (msg . args) ;attention
        (case msg
          [(empty? mt?) (null? ls)]
          [(push!) (set! ls (cons (car args) ls))]
          [(top) (car ls)]
          [(pop!) (set! ls (cdr ls))]
          [else "oops"])))))

for a data structure,
it should be consider 6 functions:
1) car: show
2) cdr!: forward data structure
3) anti-cdr!: resume cdr
4) null?: reach data structrue tail, cannot forward anymore
5) cons!: add
6) anti-cons!: delete
set! means remain same the type after call the function

這些operations是相對於資料結構而言, 對list資料結構就是car, cdr, cons,
其他的資料結構有其他的operations.

或許list的cdr混合了資料結構的步進與刪除兩種概念是錯誤的, 應該分開來.

----------------------------------------------------------------------
(define all-true?
  (lambda (lead . args)
    (if lead
        (if (null? args)
            lead
            (apply all-true? args))
        #f)))

(lead . args)搭配apply就可以遞迴

--------------------------------------------
do loop:
(define total
  (lambda (arg)
    (do ([num arg (- num 1)] [sum 0 (+ sum num)]);多個變數[名稱 起始值 to-be-the-value-in-next-step]
      [(zero? num) sum])));中斷條件
(total 10)
>55

-------------------------------------------
(vector 92 77 67)和#(92 77 67)是不一樣的,
前者mutable, 後者immutable.

--------------------------------------------------------------------------------------------------
;在寫vector操作時，總是從vec前面向vec尾端進行, 總是有now tail變數, 需要另外的功能再另外加變數, 不要改變now tail的原始意義.
;now: 代表vec資料結構的一個步進, 和list的cdr有點像.
;tail: vec的邊界,用來判斷一個entire vec操作的task是否結束了. 和list的'()有點像
;(其實vec的ref像list的car; 而vec是不能更改data structure長度的所以沒有cons,
;而有一個不太一樣的功能set-vec!來update資料)
;嚴格說vec是不能新增和刪除data的, 而只能update state, 我們只是透過now tail來指定vec線段, 來表達資料的新增與刪除.
;
;car: ref
;cdr: now
;'(): tail
;cons: (+/- now/tail), set-vec!
;
;在一開始寫vec操作function時先不要去思考vec邊界判斷應該要-1或+1, 就是多做一次或少做一次的效率事情,
;如idx變成idx+1/idx-1, 這將失去了簡潔一致性, 直接寫該變數就好, 即使多做一次, 要先把程式寫出來, 需要優化再優化,
;這樣往往最後寫出來的程式邊界條件真的是不用加減一的, 也許這才是function正確的atom風貌, 一開始考慮+/-1把function複雜了.
;
;(define selection-sort ;最外面的arg都只傳vec就好(程式不需要指定線段的話), 再以let定義所需變數, args太長可讀性很差.
;  (lambda (vec)
;    (letrec {[tail (last-idx vec)] [first-unsorted 0] [smallest first-unsorted]} ;這裡設置不變或比較少改變的變數
;      [define help
;        (lambda (now) ;我們需要now變數, 但now會不斷改變所以我們把它設在arg裡, 而不設在上面
;          {cond
;            [(>= first-unsorted tail) vec]
;            [(eq? now (+ tail 1)) (swap-vec! first-unsorted smallest vec)
;                                   (set! first-unsorted (+ first-unsorted 1))
;                                   (set! smallest first-unsorted)
;                                   (help (+ smallest 1))]
;            [else {cond [(vec<vec? now smallest vec vec) (set! smallest now)]}
;                  (help (+ now 1))]})]
;      (help (+ smallest 1)))))

以下可能才是更好的理解:
0) null?: tail?
1) car: ref (show
2) cdr!: now+1 (forward data structure
3) anti-cdr!: now-1 (resume cdr
4) cons!: set-vec!, tail(add
5) anti-cons!: set-vec!, tail(delete
(其實4 5, vec是無法實現的)

我認為vec操作比list複雜, 是因為我們不能直接針對我們想要的語意進行操作,
而要透過索引間接進行操作, 我覺得vec操作應該是可以完全把索引隱藏起來的,
像是在操作list那樣, 試著去實作看看.

[(null? vec) 'end] ; better name:tail-vec?
[(eq? (car vec) )]

可能性的實作方法:
1)val-vec: 每次都直接把下一個值取出來, 就當成直接對值操作
2)[now tail vec]: (0 5 vec) > (1 5 vec) > (2 5 vec) >... : 建立一種新的data type nvec, 抽象在vec上而隱去了索引.
  可進行像(null? nvec), (car nvec), (set-val! nvec val), ([inclusive/exclusive]-prior/later nvec);qsort nvec pivot往兩邊砍斷
  (next-forward nvec), (back-forward nvec), (first-forward nvec), (last-forward nvec)
  (up-forward nvec), (down-forward nvec), (jump-forward 5 nvec);其實這api可能不好應儘量規避索引操作.
  forward就是步進的意思, 像list的cdr;
  基本提供next-forward(x+1 y vec)和back-forward(x-1 y vec)就好,
  讓forward接口開放, 可針對問題題目再客製化臨時寫出所需的特殊forward, 但相信需要特殊forward的情況很少.

如果說這種對vec抽象的new data type nvec會造成效率的些微下降(每次都要解析(0 5 vec)),
我覺得compiler技術應該是可以自動轉換nvec function> vec function. (或者透過macro轉換)

其實我覺得我也可以設計出一種更好的list

--------------------------------------------------------------
從text頭往text尾, 試著找出str字串. (這裡程式風格應該照上面, 這個例子僅要說明組合概念而已)

(define match-str
  (lambda (text-now text-tail str-now str-tail text str)
    {cond
      [(> str-now str-tail) {list #t text-now}]
      [(> text-now text-tail) {list #f}]
      [(vec-eq-vec? text-now str-now text str)
       (match-str (+ text-now 1) text-tail (+ str-now 1) str-tail text str)]
      [else (match-str (+ text-now 1) text-tail str-now str-tail text str)]}))

(define text (vector 'a 'b 'a 'b 'c 'g))
(define str (vector 'a 'b))
(match-str 0 (last-idx text) (last-idx str) 0 text str)

讓該function變得也可以從text尾往text頭找出str可不可以呢? 可以, 但開始要用絕對值了
(或讓原本idx map to [vec.len -idx] 可能是更好的做法), 所以先不做了.
若直接將此function改成正序和反序通用的function, 很可能會使此function的複雜度激增
使得此function開始幾乎不可讀而難以維護了.
相反的我可以做寫出一個反序的function, 再和這個正序的function組合, 這樣程式依然保有可讀性也易維護.
從別的角度來看, 正反序通用的function並不夠atomic, 正序function或反序function才是atom.

也許要新增功能時, 從來都不應該去考慮直接改舊有的code、改造原有function使它多幾個features,
而應該考慮為這幾個features個別寫出幾個atom functions, 再將這些atom functions和原本function組合而達成需求,
這樣一來不用改動原本已經寫好的function, 而又能保持每個function都是atom, 高可讀又易於維護,
而當別的模組需要某個atom function的話, 也能直接提供出去.
atom、recursive、composite這幾個概念加在一起, 力量非常巨大.

Kent的compiler課程的naro passes或許也是基於類似的concept

----------------------------------------------------------
或許可以參考
tmp.protocol    = ip->ip_p;
tmp.ip_src      = ip->ip_src;
tmp.ip_dst      = ip->ip_dst;
tmp.num_of_pkts = 1;
空格對齊會有更高的可讀性.
